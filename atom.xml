<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Questocat&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://questocat.com/"/>
  <updated>2019-09-23T08:56:50.234Z</updated>
  <id>http://questocat.com/</id>
  
  <author>
    <name>QUESTOCAT</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>View 模板引擎分析</title>
    <link href="http://questocat.com//blog/2019/08/19/laravel-blade-engine.html"/>
    <id>http://questocat.com//blog/2019/08/19/laravel-blade-engine.html</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-09-23T08:56:50.234Z</updated>
    
    <content type="html"><![CDATA[<p>一直很喜欢使用 Laravel 的模板引擎，最近终于有时间去翻翻它的源码，我是基于 v5.8.32 研究的，这里记录一下。</p><a id="more"></a><p>视图化呈现时的大概流程：</p><p>1、通过 view() 方法的调用，开始视图的呈现；</p><p>2、调用 Factory 类的 make 方法，获取视图内容；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the evaluated view contents for the given view.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string|null  $view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Contracts\Support\Arrayable|array   $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $mergeData</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\View\View|\Illuminate\Contracts\View\Factory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($view = null, $data = [], $mergeData = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $factory = app(ViewFactory::class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (func_num_args() === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $factory-&gt;make($view, $data, $mergeData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.1、查找视图文件；</p><p>2.1.1、根据视图名称判断是否带有命名空间（HINT_PATH_DELIMITER），如果带有命名空间，那么会先解析命名空间，然后使用命名空间对应注册的路径数组，否则采用全局路径数组；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the fully qualified location of the view.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;views[$name])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;views[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasHintInformation($name = trim($name))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;views[$name] = <span class="keyword">$this</span>-&gt;findNamespacedView($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;views[$name] = <span class="keyword">$this</span>-&gt;findInPaths($name, <span class="keyword">$this</span>-&gt;paths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.1.2、根据视图名称和路径数组，遍历视图目录；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find the given view in the list of paths.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $paths</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \InvalidArgumentException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">findInPaths</span><span class="params">($name, $paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ((<span class="keyword">array</span>) $paths <span class="keyword">as</span> $path) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getPossibleViewFiles($name) <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;files-&gt;exists($viewPath = $path.<span class="string">'/'</span>.$file)) &#123;</span><br><span class="line">                <span class="keyword">return</span> $viewPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"View [&#123;$name&#125;] not found."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.1.3、根据注册的视图扩展名，判断视图是否存在，然后返回视图对应的路径；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a view extension with the finder.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $extensions = [<span class="string">'blade.php'</span>, <span class="string">'php'</span>, <span class="string">'css'</span>, <span class="string">'html'</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get an array of possible view files.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getPossibleViewFiles</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_map(<span class="function"><span class="keyword">function</span> <span class="params">($extension)</span> <span class="title">use</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_replace(<span class="string">'.'</span>, <span class="string">'/'</span>, $name).<span class="string">'.'</span>.$extension;</span><br><span class="line">    &#125;, <span class="keyword">$this</span>-&gt;extensions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2、根据视图名称、视图路径和视图数据，创建视图实例；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new view instance from the given arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $path</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Contracts\Support\Arrayable|array  $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Contracts\View\View</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">viewInstance</span><span class="params">($view, $path, $data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> View(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;getEngineFromPath($path), $view, $path, $data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.1、根据视图路径（后缀名），获取对应的视图引擎；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The extension to engine bindings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $extensions = [</span><br><span class="line">    <span class="string">'blade.php'</span> =&gt; <span class="string">'blade'</span>,</span><br><span class="line">    <span class="string">'php'</span> =&gt; <span class="string">'php'</span>,</span><br><span class="line">    <span class="string">'css'</span> =&gt; <span class="string">'file'</span>,</span><br><span class="line">    <span class="string">'html'</span> =&gt; <span class="string">'file'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the appropriate view engine for the given path.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $path</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Contracts\View\Engine</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \InvalidArgumentException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEngineFromPath</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! $extension = <span class="keyword">$this</span>-&gt;getExtension($path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"Unrecognized extension in file: &#123;$path&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $engine = <span class="keyword">$this</span>-&gt;extensions[$extension];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;engines-&gt;resolve($engine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的视图后缀，将会调用不同的视图引擎进行（根据后缀名称解析引擎实例）；</p><p>下面是注册的视图解析引擎：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the engine resolver instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerEngineResolver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'view.engine.resolver'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        $resolver = <span class="keyword">new</span> EngineResolver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next, we will register the various view engines with the resolver so that the</span></span><br><span class="line">        <span class="comment">// environment will resolve the engines needed for various views based on the</span></span><br><span class="line">        <span class="comment">// extension of view file. We call a method for each of the view's engines.</span></span><br><span class="line">        <span class="keyword">foreach</span> ([<span class="string">'file'</span>, <span class="string">'php'</span>, <span class="string">'blade'</span>] <span class="keyword">as</span> $engine) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="string">'register'</span>.ucfirst($engine).<span class="string">'Engine'</span>&#125;($resolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $resolver;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The extension to engine bindings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $extensions = [</span><br><span class="line">    <span class="string">'blade.php'</span> =&gt; <span class="string">'blade'</span>,</span><br><span class="line">    <span class="string">'php'</span> =&gt; <span class="string">'php'</span>,</span><br><span class="line">    <span class="string">'css'</span> =&gt; <span class="string">'file'</span>,</span><br><span class="line">    <span class="string">'html'</span> =&gt; <span class="string">'file'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>（1）如果是 css或者 html 后缀，采用 file 引擎（FileEngine），核心调用方法是 file_get_contents;</p><p>（2）如果是 php 后缀，采用 php 引擎（PhpEngine），核心调用方法是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ob_start();</span><br><span class="line"><span class="keyword">include</span> $__path;</span><br><span class="line">ob_get_clean();</span><br></pre></td></tr></table></figure><p>（3）如果是 blade.php 后缀，采用 blade 引擎（CompilerEngine）。</p><p>下面来详细分析 CompilerEngine 和 BladeCompiler 的原理：</p><p>## CompilerEngine</p><p>这个引擎会主动做缓存处理，如果缓存文件未过期，则直接调用缓存文件，否则重新编译，并通过 sha1 生成缓存文件。缓存文件默认位于 storage/framework/views 目录下，可以在 view.php 配置文件下自定义编译文件路径（视图缓存）。</p><p>BladeCompiler 原理的分析比较多，这将在另外一个 Post 讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直很喜欢使用 Laravel 的模板引擎，最近终于有时间去翻翻它的源码，我是基于 v5.8.32 研究的，这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在 Laravel 扩展包中注册自定义 Exception Handler</title>
    <link href="http://questocat.com//blog/2018/05/24/laravel-package-register-exception-handler.html"/>
    <id>http://questocat.com//blog/2018/05/24/laravel-package-register-exception-handler.html</id>
    <published>2018-05-23T16:00:00.000Z</published>
    <updated>2018-06-13T09:07:35.439Z</updated>
    
    <content type="html"><![CDATA[<p>公司有一个 Laravel 的扩展包，我们希望在这个扩展包中能够单独对异常进行处理，但是又不影响整个应用对异常的处理方式（也就是不希望影响到 <code>App\Exceptions\Handler</code> 对异常的处理逻辑）。<br><a id="more"></a><br>我们知道，Laravel 默认注册了一个异常处理 Handler 单例（app.php）,而我们对扩展包的异常处理肯定不可能在 App\Exceptions\Handler 中去修改，看上似乎无解了。直到我在 Laraval API 文档中发现 Container 提供的一个 extend 方法，追进去看了一下源码，看上去好像可以满足我的需求，那赶快来试一下吧。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>首先，我们先在扩展包的 xxxProvider 中注册异常处理 Handler（也许叫扩展默认异常处理 Handler 更准确）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">extendExceptionHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;extend(\Illuminate\Contracts\Debug\ExceptionHandler::class, <span class="function"><span class="keyword">function</span> <span class="params">($handler, $app)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExceptionHandler($handler);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，我们创建这个自定义异常处理 Handler 类，因为我使用的是 Laravel，这里我们继承 Illuminate\Foundation\Exceptions\Handler（如果是在 Lumen 中，则继承 Laravel\Lumen\Exceptions\Handler）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CustomExceptionHandler.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Exceptions</span>\<span class="title">Handler</span> <span class="title">as</span> <span class="title">BaseExceptionHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Debug</span>\<span class="title">ExceptionHandler</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> <span class="keyword">extends</span> <span class="title">BaseExceptionHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> ExceptionHandler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CustomExceptionHandler constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  ExceptionHandler $handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(ExceptionHandler $handler)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler  = $handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Report or log an exception.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Exception  $exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">report</span><span class="params">(Exception $exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">            <span class="comment">// code</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;report($exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Render an exception into an HTTP response.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Exception  $exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($request, Exception $exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">            <span class="comment">// code</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handler-&gt;render($request, $exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们可以在 CustomExceptionHandler 类中的 report 和 render 方法中处理我们扩展包的异常处理逻辑，然后不满足我们条件的就交给应用程序默认的 Exception Handler 去处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有一个 Laravel 的扩展包，我们希望在这个扩展包中能够单独对异常进行处理，但是又不影响整个应用对异常的处理方式（也就是不希望影响到 &lt;code&gt;App\Exceptions\Handler&lt;/code&gt; 对异常的处理逻辑）。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在 Laravel 策略中使用自定义身份验证提供器</title>
    <link href="http://questocat.com//blog/2018/03/06/use-custom-auth-guards-for-policy.html"/>
    <id>http://questocat.com//blog/2018/03/06/use-custom-auth-guards-for-policy.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-06-01T01:42:26.791Z</updated>
    
    <content type="html"><![CDATA[<p>策略是在特定模型或者资源中组织授权逻辑的类。默认情况下，Laravel 是将 User 实例注入到策略方法中的，那么现在我们需要注入自定义的 Administrator 应该怎么做呢？</p><a id="more"></a><p>首先，我们控制器基类中改写授权方法 authorize：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">AuthorizesRequests</span> &#123;</span><br><span class="line">        <span class="title">authorize</span> <span class="title">as</span> <span class="title">protected</span> <span class="title">baseAuthorize</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mixed $ability</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> array $arguments</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> \Illuminate\Auth\Access\Response|void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> \Illuminate\Auth\Access\AuthorizationException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">($ability, $arguments = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Auth::guard(<span class="string">'admin'</span>)-&gt;check()) &#123;</span><br><span class="line">            Auth::shouldUse(<span class="string">'admin'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;baseAuthorize($ability, $arguments);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以直接在授权策略类中定义我们自己的方法来实现授权：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostPolicy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(Administrator $admin, Post $post)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略是在特定模型或者资源中组织授权逻辑的类。默认情况下，Laravel 是将 User 实例注入到策略方法中的，那么现在我们需要注入自定义的 Administrator 应该怎么做呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux BBR 实践</title>
    <link href="http://questocat.com//blog/2017/12/05/linux-bbr-practice.html"/>
    <id>http://questocat.com//blog/2017/12/05/linux-bbr-practice.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-06-01T02:08:12.901Z</updated>
    
    <content type="html"><![CDATA[<p>BBR 的作用就是加速 TCP，尽可能的充分利用带宽；降低 buffer 占用率，从而降低延迟。</p><a id="more"></a><p>升级前下载速度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[download] 100% of 171.28MiB <span class="keyword">in</span> 00:40</span><br><span class="line">[1]-  Done                    sudo youtube-dl https://www.youtube.com/watch?v=4SdcmxGC3Yc</span><br><span class="line">[2]+  Done                    list=PLo7mBDsRHu11Szh1t-CRqwliRGRA1JOZJ</span><br></pre></td></tr></table></figure><p>升级后下载速度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[download] 100% of 171.28MiB <span class="keyword">in</span> 00:08</span><br><span class="line">[1]-  Done                    sudo youtube-dl https://www.youtube.com/watch?v=4SdcmxGC3Yc</span><br><span class="line">[2]+  Done                    list=PLo7mBDsRHu11Szh1t-CRqwliRGRA1JOZJ</span><br></pre></td></tr></table></figure><p>升级前的准备</p><p>系统内核要求：Linux kernel 4.9 及以上</p><p>检查系统内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果系统版本不满足要求，先升级内核：<br>在 内核下载地址 里找到你要用的内核，即 4.9+ 版本。 另外你要注意：<br>如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包；<br>如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包 这里我使用的是 4.10 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10/linux-image-4.10.0-041000-generic_4.10.0-041000.201702191831_amd64.deb</span><br><span class="line">sudo dpkg -i linux-image-4.10.0-041000-generic_4.10.0-041000.201702191831_amd64.deb</span><br><span class="line">sudo update-grub</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>安装（开启） BBR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf  </span><br><span class="line">sysctl -p  <span class="comment"># 立即生效配置</span></span><br></pre></td></tr></table></figure><p>内核是否已开启 BBR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control  </span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>当前内核是否载入 tcp_bbr 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p><br></p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><ul><li><a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10" target="_blank" rel="noopener">内核下载地址</a></li><li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">开启TCP BBR拥塞控制算法</a></li><li><a href="https://www.zhihu.com/question/53559433" target="_blank" rel="noopener">Linux Kernel 4.9 中的 BBR 算法与之前的 TCP 拥塞控制相比有什么优势？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BBR 的作用就是加速 TCP，尽可能的充分利用带宽；降低 buffer 占用率，从而降低延迟。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Composer 扩展包开发</title>
    <link href="http://questocat.com//blog/2017/11/08/composer-extension-development.html"/>
    <id>http://questocat.com//blog/2017/11/08/composer-extension-development.html</id>
    <published>2017-11-07T16:00:00.000Z</published>
    <updated>2019-09-23T08:44:22.465Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发一个比较独立的功能，考虑到重用、科学版本管理等要求，因此使用 Composer 来实现模块化开发。</p><a id="more"></a><p>考虑到开发和测试的时间成本，这里还有个要求，开发人员在本地开发完成某个模块后，能够快速地部署到测试环境，让测试人员进行测试。</p><h5 id="实现上面的要求需要满足"><a href="#实现上面的要求需要满足" class="headerlink" title="实现上面的要求需要满足"></a>实现上面的要求需要满足</h5><ul><li>本地开发时需要方便快速修改</li><li>测试时方便更新最新代码</li></ul><p>所以，整个开发的流程看起来是这样的：</p><p><img src="http://questocat.com/images/composer-extension-development.jpeg" alt="composer-private-repo"></p><p>其实，上面这种开发方式也可以适用于多人协作开发比较大的扩展包。</p><h5 id="如何加载扩展包"><a href="#如何加载扩展包" class="headerlink" title="如何加载扩展包"></a>如何加载扩展包</h5><p>在 Composer 中我们可以有两种方式加载扩展包目录，一种是使用 PSR-4 自动加载，另一种就是使用 Path 将扩展包以本地目录形式进行加载。<br>这里我主要说明怎样使用 Path 方式来进行加载，先说一下 Path 方式加载的工作原理，Composer 会帮我们创建一个文件夹链接，把 vendor/organization-name/my-package 文件夹链接到 packages/organization-name/my-package 下（packages 是我们在项目下创建的目录）。</p><p>首先在 composer.json 的 repositories 区块中添加一个项目源：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"repositories"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"path"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"packages/organization-name/my-package"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们在项目中添加包依赖：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"organization-name/my-package"</span>: <span class="string">"@dev"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="如何在测试环境中使用"><a href="#如何在测试环境中使用" class="headerlink" title="如何在测试环境中使用"></a>如何在测试环境中使用</h5><p>同样地，在 composer.json 的 repositories 区块中添加一个项目源（我们扩展包代码的地址）：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"repositories"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"vcs"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"git@10.1.2.215:/home/git/repo/composer_repo/my-package.git"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们在项目中添加包依赖：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"organization-name/my-package"</span>: <span class="string">"@dev"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，当我们在本地开发完成某个模块后，可以通过 Git 方式将代码提交到代码库，然后测试服务器更新最近提交的代码，测试人员就可以测试最新的功能了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发一个比较独立的功能，考虑到重用、科学版本管理等要求，因此使用 Composer 来实现模块化开发。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Composer 的 minimum-stability 属性</title>
    <link href="http://questocat.com//blog/2017/05/18/composer-properties-minimum-stability.html"/>
    <id>http://questocat.com//blog/2017/05/18/composer-properties-minimum-stability.html</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2018-06-01T02:07:04.987Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 Composer 在安装依赖包的时候会对版本进行稳定性检查，而低于 <code>minimum-stability</code> 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。</p><a id="more"></a><p>例如，现在我们需要在项目中依赖一个尚未发布稳定版本的包时候，通常会这样引入包的版本设定：<code>“vendor/package”: “*”,</code> 那么问题来了，当我们执行 <code> composer install</code> 或者 <code>composer update</code> 的时候就会出错。</p><p>问题出在哪里呢？</p><p>我们一般不会在 composer.json 中显示设置 <code>minimum-stability</code> 的值，因为在默认情况下，<code>minimum-stability</code> 的值为 <code>stable</code>，而这通常符合我们的要求，所以现在就可以理解为什么不能安装成功了。</p><p>解决这个问题，我们通常有两种方式：</p><p>一、降低 minimum-stability 所设定的最低稳定性的版本：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"minimum-stability"</span>: <span class="string">"dev"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看上去问题好像解决了，但是引入了更大的问题，那就是其他的依赖包也会去尝试安装还在开发中的版本，而这是我们不能接受的。这个时候，我们就需要引入 Composer 提供的另一个属性：<code>prefer-stable</code>。当 <code>prefer-stable</code> 的值设置为 true 时，Composer 将优先使用更稳定的包版本。</p><p>现在 composer.json 看起来是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"minimum-stability"</span>: <span class="string">"dev"</span>,</span><br><span class="line">    <span class="attr">"prefer-stable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>某些情况下，我们将 <code>prefer-stable: true</code> 与 <code>minimum-stability: dev</code> 结合使用，能够防止所有的包更新到开发版本，但这种方式不是必要的时候一般不使用。</p><p>二、重新指定依赖包的版本（推荐）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require vendor/package=dev-master</span><br></pre></td></tr></table></figure></p><p>当然了，使用 @dev 也是可以的。</p><p>现在，我们再尝试执行 <code> composer install</code> 或者 <code>composer update</code> 就可以成功了。<br><br></p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><ul><li><a href="http://docs.phpcomposer.com/04-schema.html#minimum-stability" target="_blank" rel="noopener">minimum-stability</a></li><li><a href="http://docs.phpcomposer.com/04-schema.html#prefer-stable" target="_blank" rel="noopener">prefer-stable</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道 Composer 在安装依赖包的时候会对版本进行稳定性检查，而低于 &lt;code&gt;minimum-stability&lt;/code&gt; 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
